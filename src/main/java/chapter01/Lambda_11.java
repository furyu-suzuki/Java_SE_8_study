package chapter01;/*【課題11】
* void f()メソッドを持つ、IとJの2つのインタフェースがあり、両方を実装しているクラスがあるとします。
* Iインタフェースのfメソッドが抽象、デフォルト、staticのどれかであり、
* Jインタフェースのfメソッドが抽象、デフォルト、staticのどれかである場合、
* すべての組み合わせで何が起きるでしょうか。
* 同じように、スーパークラスsを拡張し、Iインタフェースを実装した場合に、
* スーパークラスもインタフェースもvoid f()メソッドを持っていたら、どうなるかを調べなさい。
*
* 【回答】
* 両方抽象メソッドの場合：fメソッドの実装は2つ書いても1つ書いても実行できる。書いただけ実行される。
* 抽象とデフォルトの場合：実装を2つ書くと、デフォルトメソッドと競合するのでエラーになる。実装を一つにして実行しても、デフォルトメソッドの内容は無視される。->実装を全く書かないと、エラーになる。
* 抽象とstaticの場合：実装を1つ書くと、その内容が実行される。（staticの内容は実行されない）実装を全く書かないと、抽象メソッドの実装内容が無いためエラーになる。
* 両方デフォルトの場合：両方にデフォルトメソッドの中身が実行される。->実行されない。デフォルトメソッド同士が競合してエラーになる。
* デフォルトとstaticの場合：
* 両方staticの場合：staticメソッド同士が競合してエラーになる。実装を書けば、その内容だけが実行される。->実装を書いても実行されない。
* スーパークラスもfメソッドを持っている場合：スーパークラスのfメソッドがどうであれ、実装を書けばそれが実行される。
* */

public class Lambda_11 implements I{
    public static void main( String[] args ){
        Lambda_11 buf = new Lambda_11();
        buf.f();
    }

    @Override
    public void f() {
        System.out.println( "hogehoge" );
    }
//    @Override
//    public void f() {
//        System.out.println( "kemekeme" );
//    }
}
